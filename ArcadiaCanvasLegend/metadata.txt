[general]
name=ArcadiaCanvasLegend
qgisMinimumVersion=3.22
description=Canvas Legend Overlay - Part of Arcadia Suite. Display customizable legends overlaid on the QGIS canvas with full style control and export capabilities.
version=1.0.27
author=Arcadia Suite Development Team
email=info@arcadiasuite.com
about=This plugin allows users to display and configure map legends overlay on the QGIS canvas. Features include position and style configuration, text formatting options, background and frame customization, canvas-to-composition conversion, and export to clipboard or PNG. Part of the comprehensive Arcadia Suite for QGIS.
tracker=https://github.com/joseantoniosales/qgis-arcadia-suite/issues
repository=https://github.com/joseantoniosales/qgis-arcadia-suite
hasProcessingProvider=True
tags=legend,canvas,overlay,composition,export,arcadia,suite
homepage=https://github.com/joseantoniosales/qgis-arcadia-suite
category=Vector
icon=icon.svg
experimental=False
deprecated=False
server=False
changelog=
    1.0.27: BETA 27 - Enhanced Raster Stability Verification + Individual Layer Signal Management
    - Enhanced QGIS stability verification with raster-specific deep checks for pseudocolor, multiband, and paletted renderers
    - Critical fix: Stability checker now verifies raster renderer internal state (colorRampItemList access) before allowing updates
    - Individual layer signal connections: Each layer's styleChanged signal connected to debouncer for reliable QML detection
    - Automatic reconnection system: New layers automatically get individual signal connections via _on_layers_added_reconnect
    - Solves QML loading detection issue: Direct layer.styleChanged signals catch style changes missed by project-level signals
    - Raster crash protection: Deep verification prevents crashes during pseudocolor statistics calculation and band processing
    - Professional signal management: Disconnect-before-connect pattern prevents double signal connections
    - Complete coverage: All layer style changes now detected through either project-level or individual layer signals
    1.0.26: BETA 26 - "ESPERAR, VERIFICAR Y ACTUAR" Professional Signal Handling with Debounce + Stability Verification
    - Revolutionary paradigm shift from "immediate signal reaction" to professional debounce + stability verification patterns
    - Implemented QGISChangeDebouncer class with intelligent 500ms debounce timing to prevent signal storms
    - Added QGISStabilityChecker with 200ms polling intervals and 3 consecutive stability checks before action
    - All QGIS signals (layerStyleChanged, visibilityChanged, layersAdded/Removed) now routed through debouncer
    - Professional signal handling patterns used by commercial QGIS plugins for enterprise stability
    - "Wait for signal storm to settle, verify QGIS is stable, then act safely" - architectural principle
    - Eliminated root cause: immediate reactions to volatile QGIS signals during internal state changes
    - Debounce prevents overlapping updates during rapid style/layer changes
    - Stability verification ensures QGIS has finished internal processing before legend updates
    - Final solution: intelligent timing replaces technical fixes for ultimate crash elimination
    1.0.25: BETA 25 - "ÃšLTIMA BALA" Complete Rendering Separation Solution
    - Implemented complete separation: worker threads extract ONLY primitive data, main thread handles ALL rendering
    - Eliminated QgsRenderContext contamination by preventing any .asImage() calls in worker threads
    - Two-phase processing: Phase 1 (worker) extracts RGBA colors/sizes, Phase 2 (main thread) renders symbols
    - Added _extract_primitive_symbol_data() for safe color/size extraction without Qt object references
    - Main thread exclusive rendering with _render_symbols_in_main_thread() and safe render context creation
    - Complete elimination of worker thread rendering to prevent QgsRenderContext contamination crashes
    - Worker threads marked as 'is_worker_safe' and symbols flagged 'needs_main_thread_rendering'
    - Architectural guarantee: zero risk of contaminated render contexts causing phantom pointer crashes
    - Final solution for EXC_BAD_ACCESS crashes through absolute rendering separation
    1.0.24: BETA 24 - Phantom Pointer Solution with Symbol Cloning and QMutex Isolation
    - Implemented comprehensive phantom pointer protection through symbol cloning (.clone())
    - Added QMutex-based thread synchronization for complete worker thread isolation
    - Pre-rendering system converts symbols to thread-safe QImage representations
    - Symbol cache with cloned objects safe for cross-thread access
    - Thread-safety verification system for all symbol data before worker processing
    - Eliminates EXC_BAD_ACCESS crashes from invalidated QGIS symbol pointers
    - Safe symbol extraction using cloned copies instead of direct QGIS API references
    - Image-based fallback system when symbol cloning fails
    - Comprehensive cache management with automatic cleanup and statistics
    - Complete elimination of phantom pointer crashes through architectural isolation
    1.0.23: BETA 23 - Asynchronous Stability Verification System (Race Condition Solution)
    - Implemented LayerStabilityChecker for real-time layer state verification
    - Added SymbolProcessingWorker for background thread symbol processing
    - Immediate hibernation mode during layer style operations
    - Asynchronous polling to verify layer stability before legend recreation
    - Worker thread isolation prevents main thread blocking during symbol extraction
    - Race condition elimination through verification-before-action approach
    - Safe symbol processing with pre-generated QPixmap data
    - Progressive stability verification (200ms intervals, 5 second timeout)
    - Complete separation of QGIS API calls from UI rendering
    1.0.22: BETA 22 - Data structure compatibility and debug mode persistence fixes
    - Fixed LayerSymbolInfo missing 'layer' attribute causing "'LayerSymbolInfo' object has no attribute 'layer'" error
    - Added proper LayerSymbolInfo to dict conversion layer with all required attributes
    - Enhanced debug mode persistence - settings now saved and loaded correctly
    - Synchronized debug mode checkbox with actual debug_mode variable state
    - Improved symbol data mapping between LayerSymbolInfo dataclass and legacy dict format
    - Added debug mode state propagation to SymbolDataExtractor
    - Default symbol generation when no symbols found for layers
    - Better error handling and attribute validation in conversion layer
    1.0.21: BETA 21 - LayerSymbolInfo compatibility fix and centralized version control
    - Fixed 'LayerSymbolInfo' object has no attribute 'get' error
    - Added conversion layer between LayerSymbolInfo and dict format for compatibility
    - Centralized version control with PLUGIN_VERSION variable
    - Enhanced error logging with traceback for better debugging
    - Maintained backward compatibility with legacy system
    - Progressive degradation: Beta 20 -> Legacy -> Emergency mode
    1.0.20: BETA 20 - Complete architectural refactoring with cache-based symbol management
    - New SymbolCacheManager with background symbol generation and thread-safe operations
    - Introduced SymbolDataExtractor for centralized QGIS API access abstraction
    - Cache-based rendering system with 1000-item capacity and automatic cleanup
    - Separation of concerns: UI rendering isolated from QGIS API calls
    - Background SymbolGeneratorWorker threads for non-blocking symbol creation
    - Placeholder symbols during background generation process
    - Automatic cache invalidation on layer style changes and layer additions/removals
    - Graceful fallback to legacy system if cache components fail
    - Enhanced stability through architectural redesign based on user crash analysis
    1.0.19: BETA 19 - Ultra-agressive protection against QML style loading crashes
    - Multi-layer protection during paintEvent with global renderer stability checks
    - Extended safety delays (10 seconds for QML loading, 7 for vector changes, 5 for raster)
    - Enhanced QML loading detection by renderer type analysis
    - Improved symbol validation with complex renderer support
    - Ultra-defensive overlay hiding during dangerous style operations
    - Comprehensive layer stability verification before recreation
    1.0.18: BETA 18 - Enhanced protection for QML style loading crashes with extended safety delays
    1.0.17: BETA 17 - Multi-level crash protection and improved recreation algorithms
    1.0.16: BETA 16 - Enhanced crash protection, anti-recreation loops, and defensive programming
    1.0.15: BETA 15 - Improved dock widget integration and comprehensive crash protection
    1.0.14: BETA 14 - Complete overlay recreation system with crash protection
